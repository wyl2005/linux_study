1. Java SE: Standard Edition
	Java EE: Enterprise Edition
	JDK: Java Development Kit, complier+debugger+JRE
	JRE: Java Runtime Environment, JVM + runtime library
	JVM: Java Virtual Machine

2. Java在内存中用Unicode表示字符（2 bytes的char 类型）。
	与char类型不同，字符串类型String是引用类型。一个字符串可以存储0个到任意个字符。
	基本类型的变量是“持有”某个数值，引用类型的变量是“指向”某个对象；
	
	注意要区分空值null和空字符串""，空字符串是一个有效的字符串对象，它不等于null。
	
	数组元素是引用类型，数组大小不可改变。
	数组元素可以是值类型或引用类型，但数组本身是引用类型
	Java的数组有几个特点：
		数组所有元素初始化为默认值，整型都是0，浮点型是0.0，布尔型是false；
		数组一旦创建后，大小就不可改变。
	
	
	判断引用类型变量是否相等，==表示引用是否相等（是否指向同一个对象）。
	要判断引用类型的变量内容是否相等，必须使用equals()方法。

3. switch 表达式是java 13 的预览特性（preview language features)实现的，
	编译的时候，需要给编译器加上: javac --source 13 --enable-preview Main.java

4. 变量应该把访问范围缩到最小。

5. 可变参数用类型...定义，可变参数相当于数组类型:(String... names)

6. 基本类型传递的是值的拷贝，而引用类型传递的是地址:
	基本类型参数的传递，是调用方值的复制。双方各自的后续修改，互不影响。

	引用类型参数的传递，调用方的变量，和接收方的参数变量，指向的是同一个对象。
	双方任意一方对这个对象的修改，都会影响对方
	
7. 调用构造方法，必须用new操作符。

有在构造方法中初始化字段时，引用类型的字段默认是null，
数值类型的字段用默认值，int类型默认值是0，布尔类型默认值是false

在Java中，创建对象实例的时候，按照如下顺序进行初始化：

先初始化字段，例如，int age = 10;表示字段初始化为10，double salary;
表示字段默认初始化为0，String name;表示引用类型字段默认初始化为null；

执行构造方法的代码进行初始化。

如果一个类没有定义构造方法，编译器会自动生成一个没有参数、没有执行语句的默认构造方法。

8. 方法重载(overload)的目的：功能类似的方法使用同一名字，更容易记住。
Override覆写 方法名、方法参数、方法返回值都相同。
Overload  方法的参数不同，其他都相同。


9. Java只允许一个class继承自一个类，
因此，一个类有且仅有一个父类。只有Object特殊，它没有父类。

子类无法访问父类的private字段或方法。protected 关键字可以把字段和方法的访问权限控制
在继承树内部。

在java中，任何class的构造方法，第一行语句必须是调用父类的构造方法。
如果没有明确调用父类的构造方法，编译器会自动加一句super()。
如果父类没有默认的构造方法，子类必须显示调用super()并给出参数以便让编译器定位到
父类的一个合适的构造方法。
子类不会继承任何父类的构造方法，子类默认的构造方法是编译器自动生成的，不是继承的。

10. 向上转型 upcasting:把一个子类类型安全地变为父类类型的赋值。
	向下转型 downcasting:把一个父类类型强制转型为子类类型，不行！因为子类功能比父类多，
	多的功能无法凭空变出来。
	
11. 多态polymorphic 针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法。

Java语言全面支持动态绑定，而C++语言只对虚函数使用动态绑定。